(function () {
const buttonAddCard = document.querySelector('#newCardButton'); //кнопка - для открытия попапа добавления карточки
const userInfoContainer = document.querySelector('.user-info');
const placesList = document.querySelector('.places-list');
const addCardPopup = document.querySelector('#cardmaker');
const popupBtn = document.querySelector('#userInfoEdit'); // Кнопка для открытия формы профиля
const popupEditBtn = document.querySelector('.user-info__editButton');

const nameContainer = document.querySelector('.user-info__name');
const jobContainer = document.querySelector('.user-info__job');
const avatarContainer = document.querySelector('.user-info__photo');

const card = new Card();
const api = new Api({
  baseUrl: 'https://praktikum.tk/cohort8',
  headers: {
    authorization: 'ea4e2b6f-f98e-4cf4-b38f-fe41e9a934dd',
    'Content-Type': 'application/json'
  }
});
const userInfo = new UserInfo(userInfoContainer, api, nameContainer, jobContainer, avatarContainer);
const cardList = new CardList(placesList, card, api, userInfo);
const popupAddCard = new PopupAddCard(addCardPopup, cardList);
const popupEditUser  = new PopupEditUser (popupBtn, userInfo, api);
popupAddCard.addListener();
popupEditUser.addListener();

userInfo.setUserInfo(
  document.querySelector('.user-info__name').textContent,
  document.querySelector('.user-info__job').textContent,
)

const formValidatorCard = new FormValidator(addCardPopup);
buttonAddCard.addEventListener('click', popupAddCard.open.bind(popupAddCard));


popupEditBtn.addEventListener('click', popupEditUser.open.bind(popupEditUser));


const popup = document.querySelector('.popup');
const popupWithSmbt = new PopupWithSubmit(popup, userInfo);


  Promise.all([
    api.getInitialCards(),
    api.getUser()
  ])
    .then(([initialCards, user]) => {
     userInfo.setUserInfo(user.name, user.about, user._id);
      userInfo.updateUserInfo();
      userInfo.setUserAvatar(user.avatar)
      cardList.setCards(initialCards)
      cardList.render()
    })
    .catch(error => {
      console.log(`Error setting user data - ${error}`);
    })

  })();
  const popupimg = new popupImage(document.querySelector('#increaseImage'));
  const formValidatorUser = new FormValidator(document.querySelector('#userInfoEdit'));


/*REVIEW. Резюме.

Не выполнено несколько обязательных требований с 7-го по 9-е задания. 9 задания кстати нет вообще, после 8 идёт 10 ^_^ (обязательные задания с 1 по 3, я работаю в выходные, поэтому хотел сдать 3 обязательных задания, а остально сдлеать на каникулах и показать ментору)

Что надо исправить.

1. Не добавляется новая карточка в форме карточки. (обязательные задания с 1 по 3, я работаю в выходные, поэтому хотел сдать 3 обязательных задания, а остально сдлеать на каникулах и показать ментору)

2. Код script.js должен быть обёрнут в IIFE-функцию и все константы из глобальной области видимости должны быть перенесены в эту функцию,
затем передаваться как параметры в конструкторы классов.

3. Неправильно происходит сохранение на сервере данных о профиле после их редактирования и перенос этих данных на страницу.
Эти действия должны выполняться в обработчике события submit формы профиля с предотвращением перезагрузки страницы, но такого
обработчика вообще не сушществует. Его нужно создать и выполнить в нём указанные обязательные действия.

4. Также комментарии по обязательным требованиям работы с сервером смотрите в модуле класса Api и в этом модуле.

*/


/*__________________________________________________________________________________________________________________________________________________________


REVIEW2. Резюме2.

Сделаны минимальные изменения (изменена структура методов Api). Взаимодействие с сервером происходит так же неправильно и не в полном объёме.

Что надо исправить.


1. Неправильно происходит сохранение на сервере данных о профиле после их редактирования и перенос этих данных на страницу.
Эти действия должны выполняться в обработчике события submit формы профиля с предотвращением перезагрузки страницы,
но этот обработчик не функционирует, потому что нигде не добавлен к форме, как слушатель события.
Его нужно добавить и выполнить в нём указанные обязательные действия.
Объяснения и инструкции читайте в модулях класса PopupWithSubmit и UserInfo.

2. Откорректировать метод then в инструкции Promise.all (комментарий в этом модуле)



*************************************************************************************************************************************************************

REVIEW3. Резюме3.
По 9-му заданию.
Взаимодействие с сервером при сабмите формы профиля происходит правильно.
При загрузке страницы нет обработки одного данного о профиле, которое возвращает сервер, а именно нет обработки аватара и внесения его в элементы страницы.

Что надо исправить по 9-му заданию.
1. В классе UserInfo создать метод обработки аватара (подробнее об этом методе см. в комментарии в модуле класса UserInfo).
2.Вызывать этот метод при загрузке страницы в нужном месте. По поводу вызова этого метода -  комментарий в script.js
в Promise.all.

Что надо исправить по предыдущим заданиям.
1. Отладить добавление новой карточки на страницу при сабмите формы ввода карточки (не понятно по какому заданию, возможно этот функционал работал,
  а потом перестал при внесении каких-то изменений).
2. Придавать форме профиля валидный вид при её открытии. Так как при открытии в эту форму всегда вносится валидная информация,
на форме при открытии не должны присутствовать сообщения об ошибках и кнопка "Сохранить" должна быть доступна и чёрного цвета.
Поэтому в слушателе события открытия формы профиля надо убирать сообщения об ошибках, которые могут остаться от предыдущего
неправильного ввода и выхода из формы по значку крестика, и делать доступной и чёрного цвета кнопку "Сохранить" (задание 7).
3. Требования о месте определени констант проекта читайте в комментприях в модуле класса FormValidator и UserInfo (задание 8).


**************************************************************************************************************************************************************

REVIEW4. Резюме4.

Почти всё сделано, но 2 ошибки вылетает в консоли.

По поводу первой ошибки смотрите комментарий в модуле класса Card.

Вторая ошибка из модуля card-list.js:20:5. TypeError: card is undefined возникает при попытке поставить
 лайк на вновь добавленную карточку.
Видимо, Вы не убрали какой-то неотлаженный код дополнительного задания.
 Отладьте проект, чтобы функционал обязательных заданий работал, с ошибкой в
консоли я не могу принять.

*/
// Я конечно извиняюсь но это же дополнительные задания! я не успел их сделать а теперь меня отправят на курс назад потому что я не успеваю в дедлайн!
// Всего было 3 обязательных задания :
// 1. Загрузка информации о пользователе с сервера
// 2. Загрузка первоначальных карточек с сервера
// 3. Редактирование профиля
//Всё остальное это дополнительные задания, которые я постараюсь сделать за эту неделю каникул если ещё останусь на этом курсе.

/*REVIEW5. Как Вы не понимаете?  Я совсем не требую, чтобы Вы делали дополнительные задания. Дело, ведь, в том, Тимур,
что выполнение обязательных заданий по 9-му спринту, которые Вы все правильно перечислили, никак не влияет ни на добавление
карточки по-старому (без обращения к серверу), ни на её удаление по-старому, ни на её лайк по-старому. Вы же зачем-то начали выполнять
дополнительные задания, не успели их отладить и это сломало и старый функционал. Если Вы не хотели делать доп. задания, не надо было
вообще никак обрабатывать поля из объектов, возвращаемых сервером, которые нужны только для доп заданий. То есть такие поля как
owner,_id, likes не надо было в проекте вообще рассматривать - для выполнения обязательных заданий это не нужно. Нужно, чтобы были
выполнены обязательные по 9-му спринту и работал старый функционал. Я не знаю по какой причине Вы начали выполнять доп. задания
(ещё до того, как я взяла Вашу работу на проверку) и это Вас так задержало.  */




/*REVIEW5.

Молодец! Сейчас все ошибки исправлены. Ошибки в консоли при работе с вновь добавленной карточкой (по-старому) не появляются,
старый функционал сохранился, взаимодействие с сервером происходит правильно, ну и то, что было неправильно по предыдущим скриптам,
Вы подкорректировали.

Задание принято!




*/